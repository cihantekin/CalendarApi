// <auto-generated />
using System;
using Calendar.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Calendar.DataAccess.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Calendar.Domain.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Organizer")
                        .HasColumnType("text");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Calendar.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f97e47e8-6070-4b48-9f8a-a678bb630434"),
                            CreationTime = new DateTime(2021, 9, 24, 23, 36, 52, 565, DateTimeKind.Local).AddTicks(1189),
                            IsDeleted = false,
                            Name = "Sam"
                        },
                        new
                        {
                            Id = new Guid("bebf9a43-b78d-4ec4-a953-f9eafde87041"),
                            CreationTime = new DateTime(2021, 9, 24, 23, 36, 52, 566, DateTimeKind.Local).AddTicks(5299),
                            IsDeleted = false,
                            Name = "Any"
                        },
                        new
                        {
                            Id = new Guid("5b6b6abe-74f3-4309-b513-b07a840775aa"),
                            CreationTime = new DateTime(2021, 9, 24, 23, 36, 52, 566, DateTimeKind.Local).AddTicks(5332),
                            IsDeleted = false,
                            Name = "Jay"
                        },
                        new
                        {
                            Id = new Guid("bb45851f-100e-443e-b305-da0409c8c8d3"),
                            CreationTime = new DateTime(2021, 9, 24, 23, 36, 52, 566, DateTimeKind.Local).AddTicks(5335),
                            IsDeleted = false,
                            Name = "Samuel"
                        },
                        new
                        {
                            Id = new Guid("f87cbda3-e5b1-48a2-a80d-f53dc4af9e1b"),
                            CreationTime = new DateTime(2021, 9, 24, 23, 36, 52, 566, DateTimeKind.Local).AddTicks(5338),
                            IsDeleted = false,
                            Name = "Mike"
                        });
                });

            modelBuilder.Entity("EventUser", b =>
                {
                    b.Property<Guid>("EventsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MembersId")
                        .HasColumnType("uuid");

                    b.HasKey("EventsId", "MembersId");

                    b.HasIndex("MembersId");

                    b.ToTable("EventUser");
                });

            modelBuilder.Entity("EventUser", b =>
                {
                    b.HasOne("Calendar.Domain.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Calendar.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
